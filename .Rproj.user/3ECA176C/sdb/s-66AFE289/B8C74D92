{
    "collab_server" : "",
    "contents" : "#' @export\nlaunch_rnaseq_data_explorer_gadget <- function(dataset_level_df = data.frame(), cluster_level_df = data.frame(), ENSEMBL_to_color_var_list = list()) {\n\n  ui <- shinyUI(fluidPage(\n\n    # Application title\n    title = \"Gene Expression Visualization in 3 Dimensions\",\n\n    fluidRow(\n      column(6,\n             h3(\"Expression Levels in Cells\", align = 'center'),\n             wellPanel(\n               plotlyOutput(\"plot\", width = '100%', height = \"100%\")\n             ),\n             selectInput(\n               \"select\", label = h3(\"Cell level Descriptor\"), choices = as.list(c('gene', names(dataset_level_df)[!grepl(\"^D[01-9]\", names(dataset_level_df))][-1])), selected = 3\n             )\n      )\n    ),\n    fluidRow(\n      h1(\"Gene\", align = 'center'),\n      DT::dataTableOutput('dt')#, align = 'center')\n    )\n  ))\n\n  server <- shinyServer(function(input, output) {\n    output$plot <- renderPlotly({\n      if(length(input$dt_rows_selected) > 0 && input$select == 'gene')  {\n        new_coloring_variable <- ENSEMBL_to_color_var_list[[cluster_level_df[input$dt_rows_selected, 'ENSEMBL']]]\n      }\n      else if(input$select != 'gene') {\n        new_coloring_variable <- dataset_level_df[,input$select]\n      }\n      else if(length(input$dt_rows_selected) == 0 && input$select == 'gene')  {\n        new_coloring_variable <- NULL\n      }\n\n      p<-plot_ly(x = dataset_level_df$D1, y = dataset_level_df$D2, z = dataset_level_df$D3, color = new_coloring_variable, text = paste(dataset_level_df$sample_name, cluster_level_df[input$dt_rows_selected, 'SYMBOL'], sep = \",\"), type = 'scatter3d', mode = 'markers')\n      layout(p)\n    })\n    output$dt <- DT::renderDataTable(cluster_level_df, server =  TRUE, selection = 'single', filter = 'bottom', options = list(pageLength = 5, autoWidth = TRUE))\n  })\n\n  runGadget(ui, server)\n}\n\n#' @export\nsubsample_cell_ranger_data_gadget <- function(cell_by_gene_count_mat = matrix())  {\n  n_genes <- apply(cell_by_gene_count_mat, 1, function(.x)  {\n    sum(.x > 0)\n  })\n  n_reads <- apply(cell_by_gene_count_mat, 1, function(.x)  {\n    sum(.x)\n  })\n  n_reads_and_genes_df <- data.frame(sample_name = rownames(cell_by_gene_count_mat), n_genes = n_genes, n_reads = n_reads, stringsAsFactors = FALSE)\n  n_genes_plot <- ggplot2::ggplot(n_reads_and_genes_df, aes(n_genes)) + geom_histogram()\n  n_reads_plot <- ggplot2::ggplot(n_reads_and_genes_df, aes(n_reads)) + geom_histogram()\n  gridExtra::grid.arrange(n_genes_plot, n_reads_plot, ncol = 1)\n}\n\n\n",
    "created" : 1472142339489.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "515658699",
    "id" : "B8C74D92",
    "lastKnownWriteTime" : 1474557332,
    "last_content_update" : 1474557332799,
    "path" : "~/Dropbox/r_package_dev/rnaseqUtils/R/gadgets.R",
    "project_path" : "R/gadgets.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
prompt(get_cellranger_matrices)
prompt(rnaseqUtils::get_cellranger_matrices)
library(rnaseqUtils)
prompt(get_cellranger_matrices)
help(package='cellrangerRkit')
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
get_mean_dist_from_matrix <- function(temp_mat)  {
temp_ut_mat <- temp_mat[!upper.tri(temp_mat)] <- 0
mean(temp_ut_mat[temp_ut_mat != 0])
}
get_random_genes_from_matrix <- function(count_matrix = matrix(), distance_matrix = NULL, normalize_matrix = TRUE, range_of_counts = 2:50, n_sample_draws = 1000, tail_area = 0.2)  {
#remove zero counts
sample_names <- rownames(count_matrix)
lt2_names <- colnames(count_matrix)[apply(count_matrix, 2, function(.col)  {sum(.col) <= 1})]
gt1_mat <- count_matrix[,!colnames(count_matrix) %in% lt2_names]
if(normalize_matrix)  {
gt1_mat <- t(apply(gt1_mat, 1, function(.x) {log2(.x/sum(.x) * 1e6 + 1)}))
}
if(is.null(distance_matrix))  {
cor_mat <- cor(t(gt1_mat))
dist_mat <- 1 - cor_mat
}
else {
dist_mat <- distance_matrix
}
cell_non_zero_gene_counts <- apply(gt1_mat, 2, function(.x)  {sum(.x >0)})
valid_cell_non_zero_gene_counts <- cell_non_zero_gene_counts[(cell_non_zero_gene_counts %in% range_of_counts)]
genes_to_remove_list <- lapply(unique(valid_cell_non_zero_gene_counts), function(.count)  {
mean_pw_cor <- sapply(1:n_sample_draws, function(.ind)  {
sub_sample_names <- sample(sample_names, .count, replace = FALSE)
sampled_names_mat <- dist_mat[sub_sample_names,sub_sample_names]
get_mean_dist_from_matrix(sampled_names_mat)
})
mean_mean_pw_cor <- mean(mean_pw_cor)
sd_mean_pw_cor <- sd(mean_pw_cor)
genes_pval_and_dif_mat <- sapply(names(valid_cell_non_zero_gene_counts[valid_cell_non_zero_gene_counts == .count]), function(.gene_name)  {
selected_sample_names <- rownames(gt1_mat)[which(gt1_mat[,.gene_name] > 0)]
selected_mean_val<- get_mean_dist_from_matrix(dist_mat[selected_sample_names,selected_sample_names])
return(c(mean(mean_pw_cor < selected_mean_val)), log10(selected_mean_val/mean_mean_pw_cor))
})
return(genes_pval_and_dif_mat)
})
print(head(genes_pval_and_dif_mat))
return(unique(c(unlist(names(genes_to_remove_list)), lt2_names)))
}
library(rnaseqUtils)
library(rnaseqUtils)
get_random_genes_from_matrix <- function(count_matrix = matrix(), distance_matrix = NULL, normalize_matrix = TRUE, range_of_counts = 2:50, n_sample_draws = 1000, tail_area = 0.2)  {
#remove zero counts
sample_names <- rownames(count_matrix)
lt2_names <- colnames(count_matrix)[apply(count_matrix, 2, function(.col)  {sum(.col) <= 1})]
gt1_mat <- count_matrix[,!colnames(count_matrix) %in% lt2_names]
if(normalize_matrix)  {
gt1_mat <- t(apply(gt1_mat, 1, function(.x) {log2(.x/sum(.x) * 1e6 + 1)}))
}
if(is.null(distance_matrix))  {
cor_mat <- cor(t(gt1_mat))
dist_mat <- 1 - cor_mat
}
else {
dist_mat <- distance_matrix
}
cell_non_zero_gene_counts <- apply(gt1_mat, 2, function(.x)  {sum(.x >0)})
valid_cell_non_zero_gene_counts <- cell_non_zero_gene_counts[(cell_non_zero_gene_counts %in% range_of_counts)]
genes_to_remove_list <- lapply(unique(valid_cell_non_zero_gene_counts), function(.count)  {
mean_pw_cor <- sapply(1:n_sample_draws, function(.ind)  {
sub_sample_names <- sample(sample_names, .count, replace = FALSE)
sampled_names_mat <- dist_mat[sub_sample_names,sub_sample_names]
get_mean_dist_from_matrix(sampled_names_mat)
})
mean_mean_pw_cor <- mean(mean_pw_cor)
sd_mean_pw_cor <- sd(mean_pw_cor)
genes_pval_and_dif_mat <- sapply(names(valid_cell_non_zero_gene_counts[valid_cell_non_zero_gene_counts == .count]), function(.gene_name)  {
selected_sample_names <- rownames(gt1_mat)[which(gt1_mat[,.gene_name] > 0)]
selected_mean_val<- get_mean_dist_from_matrix(dist_mat[selected_sample_names,selected_sample_names])
return(c(mean(mean_pw_cor < selected_mean_val), log10(selected_mean_val/mean_mean_pw_cor)))
})
print(head(genes_pval_and_dif_mat))
return(genes_pval_and_dif_mat)
})
return(unique(c(unlist(names(genes_to_remove_list)), lt2_names)))
}
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
c(3,43,10)
seq(3,43,10)
seq(3,47,10)
300 % 102
300 %% 102
library(rnaseqUtils)
library(rnaseqUtils)
seq(200, 460, 25)
c(min_cell_count_threshold:(heuristic_threshold - 1), seq(heuristic_threshold, max(gene_counts), heuristic_step_size))
c(5:(200 - 1), seq(heuristic_threshold, max(gene_counts), heuristic_step_size))
c(5:(200 - 1), seq(200, 450), 25))
c(5:(200 - 1), seq(200, 450, 25))
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
0.5*0.5
0.9*0.1
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
ensembl <- biomaRt::useMart("ensembl", dataset="mmusculus_gene_ensembl")
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
library(rnaseqUtils)
